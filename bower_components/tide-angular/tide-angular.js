
"use strict";
/* jshint undef: true, unused: true */
/* global angular */

/**
 * @ngdoc overview
 * @name tide-angular
 * @description
 * Data visualization tools from TIDE SA
 *
 */
var tideElements = angular.module("tide-angular", []);


tideElements.directive("tdColorLegend2",["_", "d3",function (_, d3) {
 return {
  restrict: "A",
      //transclude: false,
      //template: "<div style='background-color:red' ng-transclude></div>",
      scope: {
        colorAttribute: "=tdColorAttribute",
        data: "=tdData",
      },
      
    link: function (scope, element, attrs) {
        var legendPlaceHolder = d3.select(element[0])
              .append("div")
              .attr("class", "row");

        var width = 200

        var render = function() {
          var colorScale = d3.scale.category10();

          // Asign colors according to alphabetical order to avoid inconsistency
          if (scope.colorAttribute) {
            var colorDomain = _.keys(_.groupBy(scope.data, function(d) {return d[scope.colorAttribute]})).sort();
            colorScale.domain(colorDomain);
          }

          //Remover Leyenda
          legendPlaceHolder.selectAll("div").remove();


          var legends = legendPlaceHolder.selectAll(".legends")
              .data(colorDomain)
              .enter()
                .append("div")
                .attr("class", "legends col-md-2")

          legends.append("div")
              .style("background", function(d) {return colorScale(d)})
              .style("width", "10px").style("height", "10px")
              .style("float", "left")
              .style("margin", "3px")


          legends.append("div")
              .text(function(d) {return d}) 
          }

          //render();
          scope.$watch("data", function (newVal, oldVal) {
            if (newVal) {
            }
            render();
          });   

          scope.$watch("colorAttribute", function (newVal, oldVal) {
            if (newVal) {
            }
            render();
          }); 
        
      }
    };
  }]);








/*
* toolTip
*/

/**
* @ngdoc service
* @name tide-angular.toolTip
* @requires d3service.d3
*
* @description
* Generates a tooltip element that will be shown at the mouse position
* It displays a message generated by message function, which can be overidden
* 
* Use:
* example.directive("myDirective",["toolTip",function (tooltip) {
*   var myTooltip = tooltip();
*   mytooTip.message(function(d) {
*     var msg = "Name: " + d.name;
*     return msg;
*   })
*
*   (...)
*   d3selection 
*     .on("mouseenter", function(d) {
*       mytooTip.show(d);
*     })
*     .on("mouseleave", function() {
*       mytooTip.hide();
*     });
*/
tideElements.factory("toolTip", ["d3",function(d3) {
  return function() {
      var tooltip = {};

      var message = function(d) {
        var id = d.id ? d.id : "noid";
        var msg = "<strong>ID: "+id +"</strong>";
        return msg;
      };


      tooltip.element = d3.select("body")
      .append("div")
      .attr("style", "background:#ffff99;width:350px;position:absolute;z-index:9999;border-radius: 8px;opacity:0.9;")
      .attr("class", "tooltipcontent")
      .style("visibility", "hidden");

      tooltip.content = tooltip.element
      .append("div")
      .attr("style", "padding:4px;");

      var tooltipPosition= function(mouseX, mouseY) {
        var windowH = window.innerHeight;
        var windowW = window.innerWidth;
        var scrollH = window.pageYOffset;
        var offsetV = window.document.body.offsetLeft;
        var tooltipH = tooltip.element[0][0].offsetHeight;
        var tooltipW = tooltip.element[0][0].offsetWidth;

        var posX = mouseX > (windowW-tooltipW-offsetV) ? windowW-tooltipW-offsetV : mouseX+10;

        var posY = 0;

        if ((mouseY+tooltipH-scrollH) < windowH) {
          posY = mouseY + 10;
        } else {
          posY = windowH-tooltipH+scrollH-10;
          posX = posX<(windowW-tooltipW-offsetV) ? posX : mouseX-tooltipW -10;
        }

        return {x:posX, y:posY};
      };

      tooltip.show = function(d) {
        var bodyLeft = document.body.getBoundingClientRect().left;

        var pos = {x:d3.event.pageX-bodyLeft, y:d3.event.pageY};

        var newpos = tooltipPosition(pos.x, pos.y);

        tooltip.element
        .style("top", newpos.y+"px")   
        .style("left", newpos.x+"px") 
        .style("visibility", "visible") 
        .html(message(d));      
      };

      tooltip.hide =  function() {
        tooltip.element
        .style("visibility", "hidden");
      };

    // Gets or modifies xScale
    tooltip.message = function(_) {
      if(!arguments.length) return message;
      message = _;
      return tooltip;
    };

    return tooltip;
  };

}]);

/**
 * @ngdoc overview
 * @name underscore
 * @description
 * Wraps underscore as an angular module
 * 
 * The underscore library must be loaded and _ available as a global
 *
 */
angular.module("underscore", [])
  /**
  * @ngdoc service
  * @name underscore._
  *
  * @description
  * underscore.js - _
  */
  .factory("_", function() {
    return window._; // assumes underscore has already been loaded on the page
});

/**
 * @ngdoc overview
 * @name d3service
 * @description
 * Wraps d3js as an angular module
 *
 * d3 Library must be loaded and d3 available as a global
 *
 */
angular.module("d3service", [])
  /**
  * @ngdoc service
  * @name d3service.d3
  *
  * @description
  * d3js - d3
  */
  .factory("d3", [function(){
    var d3;

    d3 = window.d3;
    return d3;
}]);
 
angular.module("tide-angular")
.directive("tdTooltip",["d3",function (_, d3, layout, regression, tooltip) {
 return {
  restrict: "AE",
      transclude: false,
      replace:true,
      template: "<div class='tooltipcontent' style='background:#ffff99;width:350px;position:absolute;z-index:9999;border-radius: 8px;opacity:0.9;'></div>",
      scope: {
        msg: "=tdMsg",
        visible: "=tdVisible",
        x: "=",
        y: "="
      },
      

      link: function (scope, element, attrs) {

        var content = angular.element("<div>");
        content.attr("stye", "padding:4px;");
        element.append(content);

        var tooltipPosition= function(mouseX, mouseY) {
          var windowH = window.innerHeight;
          var windowW = window.innerWidth;
          var scrollH = window.pageYOffset;
          var offsetV = window.document.body.offsetLeft;
          var tooltipH = element[0].offsetHeight;
          var tooltipW = element[0].offsetWidth;

          var posX = mouseX > (windowW-tooltipW-offsetV) ? windowW-tooltipW-offsetV : mouseX+10;

          var posY = 0;

          if ((mouseY+tooltipH-scrollH) < windowH) {
            posY = mouseY + 10;
          } else {
            posY = windowH-tooltipH+scrollH-10;
            posX = posX<(windowW-tooltipW-offsetV) ? posX : mouseX-tooltipW -10;
          }

          return {x:posX, y:posY};
        };

        var show = function() {
          var bodyLeft = document.body.getBoundingClientRect().left;

          var pos = {x:scope.x-bodyLeft, y:scope.y};

          var newpos = tooltipPosition(pos.x, pos.y);

          element
          .css("top", newpos.y+"px")   
          .css("left", newpos.x+"px") 
          .css("visibility", "visible") 
          //.html(message(d));      
        };

        scope.$watch("msg", function (newVal) {
          content.text(newVal);
          show();
        });      

      }
      
      
    };
  }]);




